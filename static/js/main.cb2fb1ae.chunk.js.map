{"version":3,"sources":["components/Header/Header.js","components/TodoList/TodoList.js","components/Footer/Footer.js","App.js","index.js"],"names":["Header","state","title","errorTitle","handleChangeTitle","target","setState","value","handleSubmit","event","preventDefault","newTitle","trim","resetInput","currentId","props","id","addTodo","this","className","action","onSubmit","htmlFor","CN","name","placeholder","onChange","Component","TodoList","render","visibleTodos","deleteTodo","completedTodo","changeTitle","newValue","editingTodo","showChangeTitle","handleCompletedAll","type","onClick","map","completed","onDoubleClick","key","editing","checked","Footer","invisibleFooter","countCompleted","handleTypeOfFilter","typeOfFilter","clearCompleted","footer","href","selected","App","todos","counter","currentTodo","prev","filter","item","find","el","e","todo","length","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.cb2fb1ae.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport CN from 'classnames';\n\nexport class Header extends Component {\n  state = {\n    title: '',\n    errorTitle: false,\n  };\n\n  handleChangeTitle = ({ target }) => {\n    this.setState({\n      title: target.value,\n    });\n  };\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    const newTitle = this.state.title.trim();\n\n    if (!newTitle) {\n      this.setState({\n        errorTitle: true,\n      });\n      this.resetInput();\n\n      return;\n    }\n\n    const currentId = this.props.id;\n\n    this.props.addTodo(newTitle, currentId);\n    this.setState({\n      errorTitle: false,\n    });\n    this.resetInput();\n  };\n\n  resetInput = () => {\n    this.setState({\n      title: '',\n    });\n  };\n\n  render() {\n    const { title, errorTitle } = this.state;\n\n    return (\n      <header className=\"header\">\n        <h1>todos</h1>\n        <form action=\"\" onSubmit={this.handleSubmit}>\n          <label htmlFor=\"new-todo\">\n            <input\n              className={CN({\n                'new-todo new-todo-error': errorTitle,\n                'new-todo': !errorTitle,\n              })}\n              name=\"new-todo\"\n              placeholder={errorTitle\n                ? ('введи хоть чет')\n                : ('What needs to be done?')}\n              value={title}\n              onChange={this.handleChangeTitle}\n            />\n          </label>\n        </form>\n      </header>\n    );\n  }\n}\n\nHeader.propTypes = {\n  id: PropTypes.number.isRequired,\n  addTodo: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport CN from 'classnames';\n\nexport const TodoList = {\n  render() {\n    const {\n      visibleTodos,\n      deleteTodo,\n      completedTodo,\n      handleSubmit,\n      changeTitle,\n      newValue,\n      editingTodo,\n      showChangeTitle,\n      handleChangeTitle,\n      handleCompletedAll,\n    } = this.props;\n\n    return (\n      <section className=\"main\">\n        <input\n          type=\"checkbox\"\n          id=\"toggle-all\"\n          className=\"toggle-all\"\n          onClick={handleCompletedAll}\n        />\n        <label htmlFor=\"toggle-all\">Mark all as complete</label>\n        <ul className=\"todo-list\">\n          {visibleTodos.map(({ id, title, completed }) => (\n            <li\n              onDoubleClick={() => changeTitle(id)}\n              key={id}\n              className={CN({\n                editing: editingTodo === id,\n                completed: editingTodo !== id && completed,\n                '': editingTodo !== id && !completed,\n              })}\n            >\n              <div className=\"view\">\n                <input\n                  type=\"checkbox\"\n                  checked={completed}\n                  className=\"toggle\"\n                  id={`todo-${id}`}\n                  onClick={() => completedTodo(id)}\n                />\n                <label htmlFor={`todo-${id}`}>\n                  {title}\n                </label>\n                <button\n                  type=\"button\"\n                  className=\"destroy\"\n                  onClick={() => deleteTodo(id)}\n                />\n              </div>\n              {showChangeTitle && (\n                <form onSubmit={() => handleSubmit(id)}>\n                  <input\n                    value={newValue}\n                    onChange={handleChangeTitle}\n                    type=\"text\"\n                    className=\"edit\"\n                  />\n                </form>\n              )}\n            </li>\n          ))}\n        </ul>\n      </section>\n    );\n  },\n};\n\nTodoList.propTypes = {\n  deleteTodo: PropTypes.func.isRequired,\n  completedTodo: PropTypes.func.isRequired,\n  visibleTodos: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n  })),\n  handleSubmit: PropTypes.func.isRequired,\n  changeTitle: PropTypes.func.isRequired,\n  newValue: PropTypes.string.isRequired,\n  editingTodo: PropTypes.number,\n  showChangeTitle: PropTypes.bool.isRequired,\n  handleChangeTitle: PropTypes.func.isRequired,\n  handleCompletedAll: PropTypes.func.isRequired,\n};\n\nTodoList.defaultProps = {\n  visibleTodos: [],\n  editingTodo: null,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport CN from 'classnames';\n\nexport const Footer = (\n  { invisibleFooter,\n    countCompleted,\n    handleTypeOfFilter,\n    typeOfFilter,\n    clearCompleted },\n) => (\n  <footer className={CN({\n    'footer-invisible': !invisibleFooter,\n    footer: true,\n  })}\n  >\n    <span className=\"todo-count\">\n      {countCompleted}\n      {' '}\n      items left\n    </span>\n\n    <ul className=\"filters\">\n      <li>\n        <a\n          href=\"#/\"\n          onClick={() => handleTypeOfFilter('all')}\n          className={CN({ selected: typeOfFilter === 'all' })}\n        >\n          All\n        </a>\n      </li>\n\n      <li>\n        <a\n          href=\"#/active\"\n          onClick={() => handleTypeOfFilter('active')}\n          className={CN({ selected: typeOfFilter === 'active' })}\n        >\n          Active\n        </a>\n      </li>\n\n      <li>\n        <a\n          href=\"#/completed\"\n          onClick={() => handleTypeOfFilter('completed')}\n          className={CN({ selected: typeOfFilter === 'completed' })}\n        >\n          Completed\n        </a>\n      </li>\n    </ul>\n\n    <button\n      type=\"button\"\n      className=\"clear-completed\"\n      onClick={() => clearCompleted()}\n    >\n      Clear completed\n    </button>\n  </footer>\n);\n\nFooter.propTypes = {\n  invisibleFooter: PropTypes.number.isRequired,\n  countCompleted: PropTypes.number.isRequired,\n  handleTypeOfFilter: PropTypes.func.isRequired,\n  typeOfFilter: PropTypes.string.isRequired,\n  clearCompleted: PropTypes.func.isRequired,\n};\n","import React, { Component } from 'react';\nimport { Header } from './components/Header';\nimport { TodoList } from './components/TodoList';\nimport { Footer } from './components/Footer';\n\nclass App extends Component {\n  state = {\n    todos: [],\n    counter: 1,\n    typeOfFilter: 'all',\n    newValue: '',\n    editingTodo: null,\n    showChangeTitle: false,\n  };\n\n  addTodo = (title, id) => {\n    const currentTodo = {\n      id,\n      title,\n      completed: false,\n    };\n\n    this.setState(prev => ({\n      todos: [\n        ...prev.todos,\n        currentTodo,\n      ],\n      counter: prev.counter + 1,\n    }));\n  };\n\n  deleteTodo = (id) => {\n    this.setState(prev => ({\n      todos: prev.todos.filter(item => item.id !== id),\n    }));\n  };\n\n  completedTodo = (id) => {\n    this.setState(prev => ({\n      todos: prev.todos.map((item) => {\n        if (item.id === id) {\n          return {\n            ...item, completed: !item.completed,\n          };\n        }\n\n        return item;\n      }),\n    }));\n  };\n\n  clearCompleted = () => {\n    this.setState(prev => ({\n      todos: prev.todos.filter(item => item.completed === false),\n    }));\n  };\n\n  handleTypeOfFilter = (type) => {\n    this.setState({\n      typeOfFilter: type,\n    });\n  };\n\n  handleSubmit = (id) => {\n    const { newValue } = this.state;\n\n    if (!newValue) {\n      this.setState(prev => ({\n        todos: prev.todos.filter(item => item.id !== id),\n      }));\n    }\n\n    this.setState(prev => ({\n      showChangeTitle: false,\n      editingTodo: null,\n      todos: prev.todos.map(item => (item.id === id ? {\n        ...item, title: newValue,\n      } : item)),\n    }));\n  };\n\n  changeTitle = (id) => {\n    this.setState(prev => ({\n      newValue: prev.todos.find(el => el.id === id).title,\n      editingTodo: id,\n      showChangeTitle: true,\n    }));\n  };\n\n  handleChangeTitle = (e) => {\n    this.setState({\n      newValue: e.target.value,\n    });\n  };\n\n  handleCompletedAll = () => {\n    this.setState(prev => ({\n      todos: prev.todos.map(todo => ({\n        ...todo,\n        completed: !todo.completed,\n      })),\n    }));\n  };\n\n  render() {\n    const { todos,\n      typeOfFilter,\n      newValue,\n      editingTodo,\n      showChangeTitle } = this.state;\n    let visibleTodos = [...todos];\n\n    if (typeOfFilter === 'completed') {\n      visibleTodos = visibleTodos.filter(todo => todo.completed);\n    }\n\n    if (typeOfFilter === 'active') {\n      visibleTodos = visibleTodos.filter(todo => !todo.completed);\n    }\n\n    return (\n      <section className=\"todoapp\">\n        <Header\n          todos={todos}\n          addTodo={this.addTodo}\n          id={this.state.counter}\n        />\n        <TodoList\n          visibleTodos={visibleTodos}\n          deleteTodo={this.deleteTodo}\n          completedTodo={this.completedTodo}\n          handleSubmit={this.handleSubmit}\n          changeTitle={this.changeTitle}\n          newValue={newValue}\n          editingTodo={editingTodo}\n          showChangeTitle={showChangeTitle}\n          handleChangeTitle={this.handleChangeTitle}\n          handleCompletedAll={this.handleCompletedAll}\n        />\n        <Footer\n          invisibleFooter={todos.length}\n          countCompleted={todos.filter(item => item.completed === false).length}\n          handleTypeOfFilter={this.handleTypeOfFilter}\n          typeOfFilter={typeOfFilter}\n          clearCompleted={this.clearCompleted}\n        />\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}