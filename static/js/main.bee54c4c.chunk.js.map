{"version":3,"sources":["components/Header/Header.js","components/TodoList/TodoList.js","components/Footer/Footer.js","App.js","index.js"],"names":["Header","state","title","errorTitle","handleChangeTitle","target","setState","value","handleSubmit","event","preventDefault","newTitle","trim","resetInput","currentId","props","id","addTodo","this","className","action","onSubmit","htmlFor","CN","name","placeholder","onChange","Component","TodoList","visibleTodos","deleteTodo","completedTodo","changeTitle","newValue","editingTodo","showChangeTitle","handleCompletedAll","cancelEditing","type","checked","length","every","todo","completed","map","onDoubleClick","key","editing","onClick","onBlur","onKeyDown","defaultProps","Footer","filters","invisibleFooter","countCompleted","handleTypeOfFilter","typeOfFilter","clearCompleted","footer","Object","values","item","href","selected","all","active","App","todos","counter","currentTodo","prev","filter","find","el","e","getFilterderTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bee54c4c.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport CN from 'classnames';\n\nexport class Header extends Component {\n  state = {\n    title: '',\n    errorTitle: false,\n  };\n\n  handleChangeTitle = ({ target }) => {\n    this.setState({\n      title: target.value,\n    });\n  };\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    const newTitle = this.state.title.trim();\n\n    if (!newTitle) {\n      this.setState({\n        errorTitle: true,\n      });\n      this.resetInput();\n\n      return;\n    }\n\n    const currentId = this.props.id;\n\n    this.props.addTodo(newTitle, currentId);\n    this.setState({\n      errorTitle: false,\n    });\n    this.resetInput();\n  };\n\n  resetInput = () => {\n    this.setState({\n      title: '',\n    });\n  };\n\n  render() {\n    const { title, errorTitle } = this.state;\n\n    return (\n      <header className=\"header\">\n        <h1>todos</h1>\n        <form action=\"\" onSubmit={this.handleSubmit}>\n          <label htmlFor=\"new-todo\">\n            <input\n              className={CN({\n                'new-todo new-todo-error': errorTitle,\n                'new-todo': !errorTitle,\n              })}\n              name=\"new-todo\"\n              placeholder={errorTitle\n                ? ('Please enter the value')\n                : ('What needs to be done?')}\n              value={title}\n              onChange={this.handleChangeTitle}\n            />\n          </label>\n        </form>\n      </header>\n    );\n  }\n}\n\nHeader.propTypes = {\n  id: PropTypes.number.isRequired,\n  addTodo: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport CN from 'classnames';\n\nexport const TodoList = (\n  { visibleTodos,\n    deleteTodo,\n    completedTodo,\n    handleSubmit,\n    changeTitle,\n    newValue,\n    editingTodo,\n    showChangeTitle,\n    handleChangeTitle,\n    handleCompletedAll,\n    cancelEditing },\n) => (\n  <section className=\"main\">\n    <input\n      type=\"checkbox\"\n      id=\"toggle-all\"\n      className=\"toggle-all\"\n      checked={visibleTodos.length > 0\n      && visibleTodos.every(todo => todo.completed)}\n      onChange={handleCompletedAll}\n    />\n    <label htmlFor=\"toggle-all\">Mark all as complete</label>\n    <ul className=\"todo-list\">\n      {visibleTodos.map(({ id, title, completed }) => (\n        <li\n          onDoubleClick={() => changeTitle(id)}\n          key={id}\n          className={CN({\n            editing: editingTodo === id,\n            completed: editingTodo !== id && completed,\n            '': editingTodo !== id && !completed,\n          })}\n        >\n          <div className=\"view\">\n            <input\n              type=\"checkbox\"\n              checked={completed}\n              className=\"toggle\"\n              id={`todo-${id}`}\n              onClick={() => completedTodo(id)}\n            />\n            <label htmlFor={`todo-${id}`}>\n              {title}\n            </label>\n            <button\n              type=\"button\"\n              className=\"destroy\"\n              onClick={() => deleteTodo(id)}\n            />\n          </div>\n          {showChangeTitle && (\n            <form onSubmit={() => handleSubmit(id)}>\n              <input\n                id={id}\n                value={newValue}\n                onChange={handleChangeTitle}\n                type=\"text\"\n                className=\"edit\"\n                onBlur={event => cancelEditing(event)}\n                onKeyDown={event => cancelEditing(event)}\n              />\n            </form>\n          )}\n        </li>\n      ))}\n    </ul>\n  </section>\n);\n\nTodoList.propTypes = {\n  deleteTodo: PropTypes.func.isRequired,\n  completedTodo: PropTypes.func.isRequired,\n  visibleTodos: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n  })),\n  handleSubmit: PropTypes.func.isRequired,\n  changeTitle: PropTypes.func.isRequired,\n  newValue: PropTypes.string.isRequired,\n  editingTodo: PropTypes.number,\n  showChangeTitle: PropTypes.bool.isRequired,\n  handleChangeTitle: PropTypes.func.isRequired,\n  handleCompletedAll: PropTypes.func.isRequired,\n  cancelEditing: PropTypes.func.isRequired,\n};\n\nTodoList.defaultProps = {\n  visibleTodos: [],\n  editingTodo: null,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport CN from 'classnames';\n\nexport const Footer = (\n  { filters,\n    invisibleFooter,\n    countCompleted,\n    handleTypeOfFilter,\n    typeOfFilter,\n    clearCompleted },\n) => (\n  <footer className={CN({\n    'footer-invisible': !invisibleFooter,\n    footer: true,\n  })}\n  >\n    <span className=\"todo-count\">\n      {countCompleted}\n      {' '}\n      items left\n    </span>\n\n    <ul className=\"filters\">\n      {Object.values(filters).map(item => (\n        <li key={item}>\n          <a\n            href=\"#/\"\n            onClick={() => handleTypeOfFilter(item)}\n            className={CN({ selected: typeOfFilter === item })}\n          >\n            {item}\n          </a>\n        </li>\n      ))}\n    </ul>\n\n    <button\n      type=\"button\"\n      className=\"clear-completed\"\n      onClick={() => clearCompleted()}\n    >\n      Clear completed\n    </button>\n  </footer>\n);\n\nFooter.propTypes = {\n  filters: PropTypes.shape.isRequired,\n  invisibleFooter: PropTypes.number.isRequired,\n  countCompleted: PropTypes.number.isRequired,\n  handleTypeOfFilter: PropTypes.func.isRequired,\n  typeOfFilter: PropTypes.string.isRequired,\n  clearCompleted: PropTypes.func.isRequired,\n};\n","import React, { Component } from 'react';\nimport { Header } from './components/Header';\nimport { TodoList } from './components/TodoList';\nimport { Footer } from './components/Footer';\n\nconst filters = {\n  all: 'all',\n  completed: 'completed',\n  active: 'active',\n};\n\nclass App extends Component {\n  state = {\n    todos: [],\n    counter: 1,\n    typeOfFilter: filters.all,\n    newValue: '',\n    editingTodo: null,\n    showChangeTitle: false,\n  };\n\n  addTodo = (title, id) => {\n    const currentTodo = {\n      id,\n      title,\n      completed: false,\n    };\n\n    this.setState(prev => ({\n      todos: [\n        ...prev.todos,\n        currentTodo,\n      ],\n      counter: prev.counter + 1,\n    }));\n  };\n\n  deleteTodo = (id) => {\n    this.setState(prev => ({\n      todos: prev.todos.filter(item => item.id !== id),\n    }));\n  };\n\n  completedTodo = (id) => {\n    this.setState(prev => ({\n      todos: prev.todos.map((item) => {\n        if (item.id === id) {\n          return {\n            ...item, completed: !item.completed,\n          };\n        }\n\n        return item;\n      }),\n    }));\n  };\n\n  clearCompleted = () => {\n    this.setState(prev => ({\n      todos: prev.todos.filter(item => item.completed === false),\n    }));\n  };\n\n  handleTypeOfFilter = (type) => {\n    this.setState({\n      typeOfFilter: type,\n    });\n  };\n\n  handleSubmit = (id) => {\n    const { newValue } = this.state;\n\n    if (!newValue.trim()) {\n      this.setState(prev => ({\n        todos: prev.todos.filter(item => item.id !== id),\n      }));\n    }\n\n    this.setState(prev => ({\n      showChangeTitle: false,\n      editingTodo: null,\n      todos: prev.todos.map(item => (item.id === id ? {\n        ...item, title: newValue.trim(),\n      } : item)),\n    }));\n  };\n\n  handleCompletedAll = ({ target }) => {\n    this.setState(prev => ({\n      todos: prev.todos.map(todo => ({\n        ...todo,\n        completed: target.checked,\n      })),\n    }));\n  };\n\n  cancelEditing = ({ key, target, type }) => {\n    // eslint-disable-next-line consistent-return\n    this.setState((prev) => {\n      if (type === 'blur' && target.value.trim() !== '') {\n        return {\n          showChangeTitle: false,\n          editingTodo: null,\n          todos: prev.todos.map((todo) => {\n            if (todo.id === +target.id) {\n              return {\n                ...todo,\n                title: target.value,\n              };\n            }\n\n            return todo;\n          }),\n        };\n      }\n\n      if (key === 'Escape') {\n        return {\n          showChangeTitle: false,\n          editingTodo: null,\n        };\n      }\n    });\n  };\n\n  changeTitle = (id) => {\n    this.setState(prev => ({\n      newValue: prev.todos.find(el => el.id === id).title,\n      editingTodo: id,\n      showChangeTitle: true,\n    }));\n  };\n\n  handleChangeTitle = (e) => {\n    this.setState({\n      newValue: e.target.value,\n    });\n  };\n\n  getFilterderTodos = () => {\n    const { typeOfFilter, todos } = this.state;\n\n    if (typeOfFilter === filters.completed) {\n      return [...todos].filter(todo => todo.completed);\n    }\n\n    if (typeOfFilter === filters.active) {\n      return [...todos].filter(todo => !todo.completed);\n    }\n\n    return [...todos];\n  };\n\n  render() {\n    const { todos,\n      typeOfFilter,\n      newValue,\n      editingTodo,\n      showChangeTitle } = this.state;\n\n    const visibleTodos = this.getFilterderTodos();\n\n    return (\n      <section className=\"todoapp\">\n        <Header\n          todos={todos}\n          addTodo={this.addTodo}\n          id={this.state.counter}\n        />\n        <TodoList\n          visibleTodos={visibleTodos}\n          deleteTodo={this.deleteTodo}\n          completedTodo={this.completedTodo}\n          handleSubmit={this.handleSubmit}\n          changeTitle={this.changeTitle}\n          newValue={newValue}\n          editingTodo={editingTodo}\n          showChangeTitle={showChangeTitle}\n          handleChangeTitle={this.handleChangeTitle}\n          handleCompletedAll={this.handleCompletedAll}\n          cancelEditing={this.cancelEditing}\n        />\n        <Footer\n          filters={filters}\n          invisibleFooter={todos.length}\n          countCompleted={todos.filter(item => item.completed === false).length}\n          handleTypeOfFilter={this.handleTypeOfFilter}\n          typeOfFilter={typeOfFilter}\n          clearCompleted={this.clearCompleted}\n        />\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}