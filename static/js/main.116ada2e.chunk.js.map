{"version":3,"sources":["components/Header/Header.js","components/TodoList/TodoList.js","components/Footer/Footer.js","App.js","index.js"],"names":["Header","state","title","errorTitle","handleChangeTitle","target","setState","value","handleSubmit","event","preventDefault","newTitle","trim","resetInput","currentId","props","id","newTodo","this","className","action","onSubmit","htmlFor","CN","name","placeholder","onChange","Component","TodoList","newValue","editingTodo","visibleAll","changeTitle","e","handleVisibleAll","prev","visibleTodos","deleteTodo","completedTodo","type","onClick","map","item","onDoubleClick","key","editing","completed","checked","onKeyDown","React","defaultProps","Footer","invisibleFooter","countCompleted","handleTypeOfFilter","typeOfFilter","clearCompleted","footer","href","selected","App","todos","counter","currentTodo","filter","todo","length","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.116ada2e.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport CN from 'classnames';\n\nexport class Header extends Component {\n  state = {\n    title: '',\n    errorTitle: false,\n  };\n\n  handleChangeTitle = ({ target }) => {\n    this.setState({\n      title: target.value,\n    });\n  };\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    const newTitle = this.state.title.trim();\n\n    if (!newTitle) {\n      this.setState({\n        errorTitle: true,\n      });\n      this.resetInput();\n\n      return;\n    }\n\n    // не знаю как для пропсов проптайп написать\n    const currentId = this.props.id;\n\n    this.props.newTodo(newTitle, currentId);\n    this.setState({\n      errorTitle: false,\n    });\n    this.resetInput();\n  };\n\n  resetInput = () => {\n    this.setState({\n      title: '',\n    });\n  };\n\n  render() {\n    const { title, errorTitle } = this.state;\n\n    return (\n      <header className=\"header\">\n        <h1>todos</h1>\n        <form action=\"\" onSubmit={this.handleSubmit}>\n          <label htmlFor=\"new-todo\">\n            <input\n              className={CN({\n                'new-todo new-todo-error': errorTitle,\n                'new-todo': !errorTitle,\n              })}\n              name=\"new-todo\"\n              placeholder={errorTitle\n                ? ('введи хоть чет')\n                : ('What needs to be done?')}\n              value={title}\n              onChange={this.handleChangeTitle}\n            />\n          </label>\n        </form>\n      </header>\n    );\n  }\n}\n\nHeader.propTypes = {\n  id: PropTypes.number.isRequired,\n  newTodo: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport CN from 'classnames';\n\nexport class TodoList extends React.Component {\n  state = {\n    newValue: '',\n    editingTodo: null,\n    visibleAll: true,\n  };\n\n  changeTitle = (id, title) => {\n    this.setState({\n      newValue: title,\n      editingTodo: id,\n    });\n  };\n\n  handleChangeTitle = (e) => {\n    this.setState({\n      newValue: e.target.value,\n    });\n  };\n\n  handleSubmit = (e) => {\n    // const { newValue } = this.state;\n    //\n    // this.props.newTodo(\n    //   this.props.id,\n    // );\n    // this.resetForm();\n  };\n\n  handleVisibleAll = () => {\n    this.setState(prev => ({\n      visibleAll: !prev.visibleAll,\n    }));\n  };\n\n  render() {\n    const { newValue, editingTodo, visibleAll } = this.state;\n    const { visibleTodos, deleteTodo, completedTodo } = this.props;\n\n    return (\n      <section className=\"main\">\n        <input\n          type=\"checkbox\"\n          id=\"toggle-all\"\n          className=\"toggle-all\"\n          onClick={this.handleVisibleAll}\n        />\n        <label htmlFor=\"toggle-all\">Mark all as complete</label>\n        {visibleAll ? (\n          <ul className=\"todo-list\">\n            {visibleTodos.map(item => (\n              <li\n                onDoubleClick={() => this.changeTitle(item.id, item.title)}\n                key={item.id}\n                className={CN({\n                  editing: editingTodo === item.id,\n                  completed: editingTodo !== item.id && item.completed,\n                  '': editingTodo !== item.id && !item.completed,\n                })}\n              >\n                <div className=\"view\">\n                  <input\n                    type=\"checkbox\"\n                    checked={item.completed}\n                    className=\"toggle\"\n                    id={`todo-${item.id}`}\n                    onClick={() => completedTodo(item.id)}\n                  />\n                  <label htmlFor={`todo-${item.id}`}>\n                    {item.title}\n                  </label>\n                  <button\n                    type=\"button\"\n                    className=\"destroy\"\n                    onClick={() => deleteTodo(item.id)}\n                  />\n                </div>\n                <input\n                  value={newValue}\n                  onChange={this.handleChangeTitle}\n                  type=\"text\"\n                  className=\"edit\"\n                  onKeyDown={this.handleSubmit}\n                />\n              </li>\n            ))}\n          </ul>\n        ) : ''}\n      </section>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  deleteTodo: PropTypes.func.isRequired,\n  completedTodo: PropTypes.func.isRequired,\n  visibleTodos: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n  })),\n};\n\nTodoList.defaultProps = {\n  visibleTodos: [],\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport CN from 'classnames';\n\nexport const Footer = (\n  { invisibleFooter,\n    countCompleted,\n    handleTypeOfFilter,\n    typeOfFilter,\n    clearCompleted },\n) => (\n  <footer className={CN({\n    'footer-invisible': !invisibleFooter,\n    footer: true,\n  })}\n  >\n    <span className=\"todo-count\">\n      {countCompleted}\n      {' '}\n      items left\n    </span>\n\n    <ul className=\"filters\">\n      <li>\n        <a\n          href=\"#/\"\n          onClick={() => handleTypeOfFilter('all')}\n          className={CN({ selected: typeOfFilter === 'all' })}\n        >\n          All\n        </a>\n      </li>\n\n      <li>\n        <a\n          href=\"#/active\"\n          onClick={() => handleTypeOfFilter('active')}\n          className={CN({ selected: typeOfFilter === 'active' })}\n        >\n          Active\n        </a>\n      </li>\n\n      <li>\n        <a\n          href=\"#/completed\"\n          onClick={() => handleTypeOfFilter('completed')}\n          className={CN({ selected: typeOfFilter === 'completed' })}\n        >\n          Completed\n        </a>\n      </li>\n    </ul>\n\n    <button\n      type=\"button\"\n      className=\"clear-completed\"\n      onClick={() => clearCompleted()}\n    >\n      Clear completed\n    </button>\n  </footer>\n);\n\nFooter.propTypes = {\n  invisibleFooter: PropTypes.number.isRequired,\n  countCompleted: PropTypes.number.isRequired,\n  handleTypeOfFilter: PropTypes.func.isRequired,\n  typeOfFilter: PropTypes.string.isRequired,\n  clearCompleted: PropTypes.func.isRequired,\n};\n","import React, { Component } from 'react';\nimport { Header } from './components/Header';\nimport { TodoList } from './components/TodoList';\nimport { Footer } from './components/Footer';\n\nclass App extends Component {\n  state = {\n    todos: [],\n    counter: 1,\n    typeOfFilter: '',\n  };\n\n  newTodo = (title, id) => {\n    const currentTodo = {\n      id,\n      title,\n      completed: false,\n    };\n\n    this.setState(prev => ({\n      todos: [\n        ...prev.todos,\n        currentTodo,\n      ],\n      counter: prev.counter + 1,\n    }));\n  };\n\n  deleteTodo = (id) => {\n    this.setState(prev => ({\n      todos: prev.todos.filter(item => item.id !== id),\n    }));\n  };\n\n  completedTodo = (id) => {\n    this.setState(prev => ({\n      todos: prev.todos.map((item) => {\n        if (item.id === id) {\n          return {\n            ...item, completed: !item.completed,\n          };\n        }\n\n        return item;\n      }),\n    }));\n  };\n\n  clearCompleted = () => {\n    this.setState(prev => ({\n      todos: prev.todos.filter(item => item.completed === false),\n    }));\n  };\n\n  handleTypeOfFilter = (type) => {\n    this.setState({\n      typeOfFilter: type,\n    });\n  };\n\n  render() {\n    const { todos, typeOfFilter } = this.state;\n    let visibleTodos = [...todos];\n\n    if (typeOfFilter === 'completed') {\n      visibleTodos = todos.filter(todo => todo.completed);\n    }\n\n    if (typeOfFilter === 'active') {\n      visibleTodos = todos.filter(todo => !todo.completed);\n    }\n\n    return (\n      <section className=\"todoapp\">\n        <Header\n          todos={todos}\n          newTodo={this.newTodo}\n          id={this.state.counter}\n        />\n        <TodoList\n          visibleTodos={visibleTodos}\n          deleteTodo={this.deleteTodo}\n          completedTodo={this.completedTodo}\n        />\n        <Footer\n          invisibleFooter={todos.length}\n          countCompleted={todos.filter(item => item.completed === false).length}\n          handleTypeOfFilter={this.handleTypeOfFilter}\n          typeOfFilter={typeOfFilter}\n          clearCompleted={this.clearCompleted}\n        />\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}